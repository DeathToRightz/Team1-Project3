//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""LevelOne"",
            ""id"": ""db6a3894-240c-4111-97cd-5e5266d4815e"",
            ""actions"": [
                {
                    ""name"": ""OneChooseLever"",
                    ""type"": ""Button"",
                    ""id"": ""04e7b6ee-99e2-4f79-a0da-b1b545515f90"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TwoMoveRight"",
                    ""type"": ""Button"",
                    ""id"": ""07bc45b8-3ecb-4a75-9829-22a38d43307e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TwoMoveLeft"",
                    ""type"": ""Button"",
                    ""id"": ""1de8fb7d-c243-4232-8805-848ac81f2672"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TwoChooseLever"",
                    ""type"": ""Button"",
                    ""id"": ""d8d9c041-fd1c-4efa-af35-983cf79e3016"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OneMoveLeft"",
                    ""type"": ""Button"",
                    ""id"": ""e6246c9b-5127-419c-b83d-69e57cc3ae9e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OneMoveRight"",
                    ""type"": ""Button"",
                    ""id"": ""6f399aa5-428f-423b-9433-7b2e5e887b11"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""46ef2aac-ce5f-4002-a17a-5281dc1e98bc"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OneChooseLever"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ae622978-b97f-4d5f-a6df-ddd282dc9332"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OneMoveLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ad9ffe3a-4e6f-4d1d-938e-46b9a9437fb3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OneMoveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a8a58493-d99e-4208-ab71-d60272f68a6e"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TwoChooseLever"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f4a88c2d-e9ec-43e7-8765-14b555bd0c3f"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TwoMoveLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c0e12635-d6a3-4fe6-86c5-7718683ab5ff"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TwoMoveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""LevelTwo"",
            ""id"": ""51965a05-01d0-4ac2-8243-82b78a48f81e"",
            ""actions"": [
                {
                    ""name"": ""Player1Move"",
                    ""type"": ""Value"",
                    ""id"": ""1f1fe5eb-6d29-4d26-823b-2e1681b2e96e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Player2Move"",
                    ""type"": ""Value"",
                    ""id"": ""bf00182f-386c-444c-a2fb-aa8b27fe78cf"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""329e642c-03f3-4274-a5f3-082361cf2ab2"",
                    ""path"": ""Dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player1Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3608ef99-1a96-4f8f-a83f-24968b5605d6"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Player1Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""eb48c571-7b9a-4088-8a4d-a4c6ee4cd36d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Player1Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f1ce31b1-c5b5-44eb-bf6f-16504cf015f5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Player1Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""cd2f97ba-202e-464f-8379-c4c6f11aae3e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Player1Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""a52852bf-9f25-4178-a787-180bde138d3e"",
                    ""path"": ""Dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player2Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e7ca9237-13f5-4358-9594-5c356e80fbc9"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Player2Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f5537078-782b-4477-8535-6b979a7406f4"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Player2Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""606df99d-b179-40a6-baaf-2720e507b3ca"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Player2Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2384c2f1-747d-4a00-98dd-7f162e602924"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Player2Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""LevelThree"",
            ""id"": ""a39c8ee0-1f00-4c8f-be7a-e9055f3bb6fc"",
            ""actions"": [
                {
                    ""name"": ""PlayerOneMove"",
                    ""type"": ""Value"",
                    ""id"": ""f242bcb2-6fdc-42ef-aa81-aec56c6021a0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PlayerTwoMove"",
                    ""type"": ""Value"",
                    ""id"": ""d042503b-48fb-4311-8822-4b8057623fc9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PlayerOneFire"",
                    ""type"": ""Button"",
                    ""id"": ""244e3c44-6252-46d1-affa-81660fe127ec"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlayerTwoFire"",
                    ""type"": ""Button"",
                    ""id"": ""47788727-7d97-41dc-99b4-d8451857ceba"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""a38666be-7a68-48aa-b7a1-18cfe8ecc634"",
                    ""path"": ""Dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerOneMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0c748648-ed3b-4f79-8218-93279bfee3d9"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""PlayerOneMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2a87a2d9-0aa8-43d1-b0d6-fda3654395b1"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""PlayerOneMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""84bdb12e-def0-4c5f-9eef-9474213627eb"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""PlayerOneMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""729e40b9-4005-4382-89d6-316260e89d41"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""PlayerOneMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""ArrowKeys"",
                    ""id"": ""b0ff29c6-5686-4736-8e8b-a5ffe2182b92"",
                    ""path"": ""Dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerTwoMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""fb7d8332-74b2-424d-8eb3-e26d7bab2b01"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""PlayerTwoMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""85e462db-5642-4f90-9fa9-8d41f5a356e9"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""PlayerTwoMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ec00d27b-3a24-4b06-a4d1-443e371d6e27"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""PlayerTwoMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""412c5228-5cb9-4234-a005-ea9bc176577e"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""PlayerTwoMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""365b80a0-76a5-4e52-8bc4-7c6ef6ef42bd"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerOneFire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1bd53a01-03fe-440b-a98a-e096f0f20327"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerTwoFire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // LevelOne
        m_LevelOne = asset.FindActionMap("LevelOne", throwIfNotFound: true);
        m_LevelOne_OneChooseLever = m_LevelOne.FindAction("OneChooseLever", throwIfNotFound: true);
        m_LevelOne_TwoMoveRight = m_LevelOne.FindAction("TwoMoveRight", throwIfNotFound: true);
        m_LevelOne_TwoMoveLeft = m_LevelOne.FindAction("TwoMoveLeft", throwIfNotFound: true);
        m_LevelOne_TwoChooseLever = m_LevelOne.FindAction("TwoChooseLever", throwIfNotFound: true);
        m_LevelOne_OneMoveLeft = m_LevelOne.FindAction("OneMoveLeft", throwIfNotFound: true);
        m_LevelOne_OneMoveRight = m_LevelOne.FindAction("OneMoveRight", throwIfNotFound: true);
        // LevelTwo
        m_LevelTwo = asset.FindActionMap("LevelTwo", throwIfNotFound: true);
        m_LevelTwo_Player1Move = m_LevelTwo.FindAction("Player1Move", throwIfNotFound: true);
        m_LevelTwo_Player2Move = m_LevelTwo.FindAction("Player2Move", throwIfNotFound: true);
        // LevelThree
        m_LevelThree = asset.FindActionMap("LevelThree", throwIfNotFound: true);
        m_LevelThree_PlayerOneMove = m_LevelThree.FindAction("PlayerOneMove", throwIfNotFound: true);
        m_LevelThree_PlayerTwoMove = m_LevelThree.FindAction("PlayerTwoMove", throwIfNotFound: true);
        m_LevelThree_PlayerOneFire = m_LevelThree.FindAction("PlayerOneFire", throwIfNotFound: true);
        m_LevelThree_PlayerTwoFire = m_LevelThree.FindAction("PlayerTwoFire", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // LevelOne
    private readonly InputActionMap m_LevelOne;
    private List<ILevelOneActions> m_LevelOneActionsCallbackInterfaces = new List<ILevelOneActions>();
    private readonly InputAction m_LevelOne_OneChooseLever;
    private readonly InputAction m_LevelOne_TwoMoveRight;
    private readonly InputAction m_LevelOne_TwoMoveLeft;
    private readonly InputAction m_LevelOne_TwoChooseLever;
    private readonly InputAction m_LevelOne_OneMoveLeft;
    private readonly InputAction m_LevelOne_OneMoveRight;
    public struct LevelOneActions
    {
        private @PlayerInput m_Wrapper;
        public LevelOneActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @OneChooseLever => m_Wrapper.m_LevelOne_OneChooseLever;
        public InputAction @TwoMoveRight => m_Wrapper.m_LevelOne_TwoMoveRight;
        public InputAction @TwoMoveLeft => m_Wrapper.m_LevelOne_TwoMoveLeft;
        public InputAction @TwoChooseLever => m_Wrapper.m_LevelOne_TwoChooseLever;
        public InputAction @OneMoveLeft => m_Wrapper.m_LevelOne_OneMoveLeft;
        public InputAction @OneMoveRight => m_Wrapper.m_LevelOne_OneMoveRight;
        public InputActionMap Get() { return m_Wrapper.m_LevelOne; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LevelOneActions set) { return set.Get(); }
        public void AddCallbacks(ILevelOneActions instance)
        {
            if (instance == null || m_Wrapper.m_LevelOneActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LevelOneActionsCallbackInterfaces.Add(instance);
            @OneChooseLever.started += instance.OnOneChooseLever;
            @OneChooseLever.performed += instance.OnOneChooseLever;
            @OneChooseLever.canceled += instance.OnOneChooseLever;
            @TwoMoveRight.started += instance.OnTwoMoveRight;
            @TwoMoveRight.performed += instance.OnTwoMoveRight;
            @TwoMoveRight.canceled += instance.OnTwoMoveRight;
            @TwoMoveLeft.started += instance.OnTwoMoveLeft;
            @TwoMoveLeft.performed += instance.OnTwoMoveLeft;
            @TwoMoveLeft.canceled += instance.OnTwoMoveLeft;
            @TwoChooseLever.started += instance.OnTwoChooseLever;
            @TwoChooseLever.performed += instance.OnTwoChooseLever;
            @TwoChooseLever.canceled += instance.OnTwoChooseLever;
            @OneMoveLeft.started += instance.OnOneMoveLeft;
            @OneMoveLeft.performed += instance.OnOneMoveLeft;
            @OneMoveLeft.canceled += instance.OnOneMoveLeft;
            @OneMoveRight.started += instance.OnOneMoveRight;
            @OneMoveRight.performed += instance.OnOneMoveRight;
            @OneMoveRight.canceled += instance.OnOneMoveRight;
        }

        private void UnregisterCallbacks(ILevelOneActions instance)
        {
            @OneChooseLever.started -= instance.OnOneChooseLever;
            @OneChooseLever.performed -= instance.OnOneChooseLever;
            @OneChooseLever.canceled -= instance.OnOneChooseLever;
            @TwoMoveRight.started -= instance.OnTwoMoveRight;
            @TwoMoveRight.performed -= instance.OnTwoMoveRight;
            @TwoMoveRight.canceled -= instance.OnTwoMoveRight;
            @TwoMoveLeft.started -= instance.OnTwoMoveLeft;
            @TwoMoveLeft.performed -= instance.OnTwoMoveLeft;
            @TwoMoveLeft.canceled -= instance.OnTwoMoveLeft;
            @TwoChooseLever.started -= instance.OnTwoChooseLever;
            @TwoChooseLever.performed -= instance.OnTwoChooseLever;
            @TwoChooseLever.canceled -= instance.OnTwoChooseLever;
            @OneMoveLeft.started -= instance.OnOneMoveLeft;
            @OneMoveLeft.performed -= instance.OnOneMoveLeft;
            @OneMoveLeft.canceled -= instance.OnOneMoveLeft;
            @OneMoveRight.started -= instance.OnOneMoveRight;
            @OneMoveRight.performed -= instance.OnOneMoveRight;
            @OneMoveRight.canceled -= instance.OnOneMoveRight;
        }

        public void RemoveCallbacks(ILevelOneActions instance)
        {
            if (m_Wrapper.m_LevelOneActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILevelOneActions instance)
        {
            foreach (var item in m_Wrapper.m_LevelOneActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LevelOneActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LevelOneActions @LevelOne => new LevelOneActions(this);

    // LevelTwo
    private readonly InputActionMap m_LevelTwo;
    private List<ILevelTwoActions> m_LevelTwoActionsCallbackInterfaces = new List<ILevelTwoActions>();
    private readonly InputAction m_LevelTwo_Player1Move;
    private readonly InputAction m_LevelTwo_Player2Move;
    public struct LevelTwoActions
    {
        private @PlayerInput m_Wrapper;
        public LevelTwoActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Player1Move => m_Wrapper.m_LevelTwo_Player1Move;
        public InputAction @Player2Move => m_Wrapper.m_LevelTwo_Player2Move;
        public InputActionMap Get() { return m_Wrapper.m_LevelTwo; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LevelTwoActions set) { return set.Get(); }
        public void AddCallbacks(ILevelTwoActions instance)
        {
            if (instance == null || m_Wrapper.m_LevelTwoActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LevelTwoActionsCallbackInterfaces.Add(instance);
            @Player1Move.started += instance.OnPlayer1Move;
            @Player1Move.performed += instance.OnPlayer1Move;
            @Player1Move.canceled += instance.OnPlayer1Move;
            @Player2Move.started += instance.OnPlayer2Move;
            @Player2Move.performed += instance.OnPlayer2Move;
            @Player2Move.canceled += instance.OnPlayer2Move;
        }

        private void UnregisterCallbacks(ILevelTwoActions instance)
        {
            @Player1Move.started -= instance.OnPlayer1Move;
            @Player1Move.performed -= instance.OnPlayer1Move;
            @Player1Move.canceled -= instance.OnPlayer1Move;
            @Player2Move.started -= instance.OnPlayer2Move;
            @Player2Move.performed -= instance.OnPlayer2Move;
            @Player2Move.canceled -= instance.OnPlayer2Move;
        }

        public void RemoveCallbacks(ILevelTwoActions instance)
        {
            if (m_Wrapper.m_LevelTwoActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILevelTwoActions instance)
        {
            foreach (var item in m_Wrapper.m_LevelTwoActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LevelTwoActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LevelTwoActions @LevelTwo => new LevelTwoActions(this);

    // LevelThree
    private readonly InputActionMap m_LevelThree;
    private List<ILevelThreeActions> m_LevelThreeActionsCallbackInterfaces = new List<ILevelThreeActions>();
    private readonly InputAction m_LevelThree_PlayerOneMove;
    private readonly InputAction m_LevelThree_PlayerTwoMove;
    private readonly InputAction m_LevelThree_PlayerOneFire;
    private readonly InputAction m_LevelThree_PlayerTwoFire;
    public struct LevelThreeActions
    {
        private @PlayerInput m_Wrapper;
        public LevelThreeActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @PlayerOneMove => m_Wrapper.m_LevelThree_PlayerOneMove;
        public InputAction @PlayerTwoMove => m_Wrapper.m_LevelThree_PlayerTwoMove;
        public InputAction @PlayerOneFire => m_Wrapper.m_LevelThree_PlayerOneFire;
        public InputAction @PlayerTwoFire => m_Wrapper.m_LevelThree_PlayerTwoFire;
        public InputActionMap Get() { return m_Wrapper.m_LevelThree; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LevelThreeActions set) { return set.Get(); }
        public void AddCallbacks(ILevelThreeActions instance)
        {
            if (instance == null || m_Wrapper.m_LevelThreeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LevelThreeActionsCallbackInterfaces.Add(instance);
            @PlayerOneMove.started += instance.OnPlayerOneMove;
            @PlayerOneMove.performed += instance.OnPlayerOneMove;
            @PlayerOneMove.canceled += instance.OnPlayerOneMove;
            @PlayerTwoMove.started += instance.OnPlayerTwoMove;
            @PlayerTwoMove.performed += instance.OnPlayerTwoMove;
            @PlayerTwoMove.canceled += instance.OnPlayerTwoMove;
            @PlayerOneFire.started += instance.OnPlayerOneFire;
            @PlayerOneFire.performed += instance.OnPlayerOneFire;
            @PlayerOneFire.canceled += instance.OnPlayerOneFire;
            @PlayerTwoFire.started += instance.OnPlayerTwoFire;
            @PlayerTwoFire.performed += instance.OnPlayerTwoFire;
            @PlayerTwoFire.canceled += instance.OnPlayerTwoFire;
        }

        private void UnregisterCallbacks(ILevelThreeActions instance)
        {
            @PlayerOneMove.started -= instance.OnPlayerOneMove;
            @PlayerOneMove.performed -= instance.OnPlayerOneMove;
            @PlayerOneMove.canceled -= instance.OnPlayerOneMove;
            @PlayerTwoMove.started -= instance.OnPlayerTwoMove;
            @PlayerTwoMove.performed -= instance.OnPlayerTwoMove;
            @PlayerTwoMove.canceled -= instance.OnPlayerTwoMove;
            @PlayerOneFire.started -= instance.OnPlayerOneFire;
            @PlayerOneFire.performed -= instance.OnPlayerOneFire;
            @PlayerOneFire.canceled -= instance.OnPlayerOneFire;
            @PlayerTwoFire.started -= instance.OnPlayerTwoFire;
            @PlayerTwoFire.performed -= instance.OnPlayerTwoFire;
            @PlayerTwoFire.canceled -= instance.OnPlayerTwoFire;
        }

        public void RemoveCallbacks(ILevelThreeActions instance)
        {
            if (m_Wrapper.m_LevelThreeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILevelThreeActions instance)
        {
            foreach (var item in m_Wrapper.m_LevelThreeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LevelThreeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LevelThreeActions @LevelThree => new LevelThreeActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    private int m_XRSchemeIndex = -1;
    public InputControlScheme XRScheme
    {
        get
        {
            if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
            return asset.controlSchemes[m_XRSchemeIndex];
        }
    }
    public interface ILevelOneActions
    {
        void OnOneChooseLever(InputAction.CallbackContext context);
        void OnTwoMoveRight(InputAction.CallbackContext context);
        void OnTwoMoveLeft(InputAction.CallbackContext context);
        void OnTwoChooseLever(InputAction.CallbackContext context);
        void OnOneMoveLeft(InputAction.CallbackContext context);
        void OnOneMoveRight(InputAction.CallbackContext context);
    }
    public interface ILevelTwoActions
    {
        void OnPlayer1Move(InputAction.CallbackContext context);
        void OnPlayer2Move(InputAction.CallbackContext context);
    }
    public interface ILevelThreeActions
    {
        void OnPlayerOneMove(InputAction.CallbackContext context);
        void OnPlayerTwoMove(InputAction.CallbackContext context);
        void OnPlayerOneFire(InputAction.CallbackContext context);
        void OnPlayerTwoFire(InputAction.CallbackContext context);
    }
}
